"""This module is the lexical analyzer (also known as scanner or tokenizer).

This is responsible for converting input text into a stream (here generator) of
tokens.
"""

from typing import Any, Generator, Union

from sylvie.interpreter.tokens import Token, TokenType


class Lexer:
    """This class lexeses the input text.

    Attributes:
        text: input mathematical expression
    """

    def __init__(self) -> None:
        """Initialize lexer."""

        self.text = None
        self.current_char: Union[str, Any] = None

    def analyze(self, text: str) -> Generator:
        """Converts input text into a stream of tokens.

        Args:
            text: text to be lexed.
        """
        self.text = iter(text)
        self.advance()

        return self.tokens()

    def advance(self) -> None:
        """Move to next character."""
        try:
            self.current_char = next(self.text)
        except StopIteration:
            self.current_char = "EOF" if self.current_char != "EOF" else None

    @staticmethod
    def error(msg: str):  # skipcq: PY-D0003
        raise ValueError(msg)

    def tokens(self) -> Generator:
        """Yields tokens generated by the lexer."""
        while self.current_char:
            if self.current_char.isspace():
                self.advance()

            if self.current_char.isdigit() or self.current_char == ".":
                yield self.scan_digits()

            try:
                # get enum member by value, e.g.
                # TokenType('(') --> TokenType.LPAREN
                token_type = TokenType(self.current_char)
            # skipcq: PYL-W0511
            except ValueError:
                # if self.current_char not member of TokenType raise error
                self.error(f"invalid character '{self.current_char}'")
            else:
                token = Token(token_type, token_type.value)

            self.advance()
            yield token

    def scan_digits(self) -> Token:
        """Scans a continuous text of real constants."""
        decimal_count = 0
        num: str = ""

        while self.current_char and (
            self.current_char.isdigit() or self.current_char == "."
        ):
            if self.current_char == ".":
                decimal_count += 1
            if decimal_count > 1:
                self.error("More than one decimal in single number")

            num += self.current_char
            self.advance()

        if num.startswith("."):
            num = "0" + num
        elif num.endswith("."):
            num += "0"

        return (
            Token(TokenType.NUMBER, float(num))
            if decimal_count > 0
            else Token(TokenType.NUMBER, int(num))
        )
